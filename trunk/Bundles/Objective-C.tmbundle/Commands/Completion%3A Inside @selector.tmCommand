<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>beforeRunningCommand</key>
	<string>nop</string>
	<key>bundleUUID</key>
	<string>4679484F-6227-11D9-BFB1-000D93589AF6</string>
	<key>command</key>
	<string>#!/usr/bin/env ruby
require ENV['TM_SUPPORT_PATH'] + "/lib/exit_codes"
require "#{ENV['TM_SUPPORT_PATH']}/lib/escape"

def caret_position(line)
  tmp = ENV['TM_LINE_NUMBER'].to_i - ENV['TM_INPUT_START_LINE'].to_i
  if tmp &gt; 0
    caret_placement = line.index_of_nth_occurrence_of(tmp,?\n) + ENV['TM_LINE_INDEX'].to_i
  else
    caret_placement =ENV['TM_LINE_INDEX'].to_i-ENV['TM_INPUT_START_LINE_INDEX'].to_i - 1
  end
end

line = STDIN.read

caret_placement = caret_position(line)
def construct_arg_name(arg)
	a = arg.match(/(NS|AB|CI|CD)?(Mutable)?(([AEIOQUYi])?[A-Za-z_0-9]+)/)
	unless a.nil?
		(a[4].nil? ? "a": "an") + a[3].sub!(/\b\w/) { $&amp;.upcase }
	else
		""
	end
end

def prettify(cand, call)
  stuff = cand.split("\t")
  out = stuff[0]
  return [out.chomp.strip, stuff[0], cand]
end

def snippet_generator(cand, start, call)
  stuff = cand[start..-1].split("\t") 
  out = stuff[0]
  out = out.chomp.strip + "$0"
  return out
end

def pop_up(candidates, searchTerm, call = true)
  start = searchTerm.size
  prettyCandidates = candidates.map { |candidate| prettify(candidate,call) }.sort

if prettyCandidates.size &gt; 1
    require "enumerator"
    pruneList = []  

    prettyCandidates.each_cons(2) do |a| 
      pruneList &lt;&lt; (a[0][0] != a[1][0]) # check if prettified versions are the same
    end
    pruneList &lt;&lt; true
    ind = -1
    prettyCandidates = prettyCandidates.select do |a| #remove duplicates
      pruneList[ind+=1]  
    end
  end
  prettyCandidates = prettyCandidates.sort {|x,y| x[1].downcase &lt;=&gt; y[1].downcase }
  if prettyCandidates.size &gt; 1
    #index = start
    #test = false
    #while !test
    #  candidates.each_cons(2) do |a,b|
    #    break if test = (a[index].chr != b[index].chr || a[index].chr == "\t")
    #  end
    #  break if test
    #  searchTerm &lt;&lt; candidates[0][index].chr
    #  index +=1
    #end
    
    show_dialog(prettyCandidates,start) do |c,s|
			snippet_generator(c,s, call)
		end
  else
    snippet_generator( candidates[0], start, call )
  end
end

def show_dialog(prettyCandidates,start,&amp;snip_gen)
    require "#{ENV['TM_SUPPORT_PATH']}/lib/osx/plist"
    pl = {'menuItems' =&gt; prettyCandidates.map { |pretty,junk, full | { 'title' =&gt; pretty, 'cand' =&gt; full} }}
    io = open('|"$DIALOG" -u', "r+")
    io &lt;&lt;  pl.to_plist
    io.close_write
    res = OSX::PropertyList::load(io.read)
    if res.has_key? 'selectedMenuItem'
      snip_gen.call( res['selectedMenuItem']['cand'], start )
    else
      "$0"
    end
end

def candidates_or_exit(methodSearch, list, fileNames, notif = false)
	x = candidate_list(methodSearch, list, fileNames, notif)
  TextMate.exit_show_tool_tip "No completion available" if x.empty?
  return x
end

def candidate_list(methodSearch, list, fileNames, notif = false)
  candidates = []
  fileNames.each do |fileName|
    zGrepped = %x{ zgrep ^#{e_sh methodSearch } #{e_sh ENV['TM_BUNDLE_SUPPORT']}/#{fileName} }
    candidates += zGrepped.split("\n")
  end
  # strip notifications
  if notif
	  candidates = candidates.select {|cand| cand.match(/\tno\t/) }
	else
    candidates = candidates.reject {|cand| cand.match(/\tno\t/) }
  end
  return [] if candidates.empty?
  if list.nil?
    return candidates
  else
    n = []
    candidates.each do |cand|
      n &lt;&lt; cand if list.include?(cand.split("\t")[0])
    end
    n = (n.empty? ? candidates : n)

    return n
  end
end

methodDeclaration = /^(?:@selector\()([_a-zA-Z][a-zA-Z0-9:]*)$/

if k = line[0..caret_placement].match(methodDeclaration)
  candidates = candidates_or_exit( k[1], nil, "cocoa.txt.gz")
  res =pop_up(candidates, k[1])
  TextMate.exit_discard if res == "$0"
  print "@selector(" + k[1] + res + e_sn(line[caret_placement + 1 ..  -1])
else
  TextMate.exit_discard
end
</string>
	<key>disableOutputAutoIndent</key>
	<true/>
	<key>fallbackInput</key>
	<string>scope</string>
	<key>input</key>
	<string>selection</string>
	<key>keyEquivalent</key>
	<string>~</string>
	<key>name</key>
	<string>Completion: Inside @selector</string>
	<key>output</key>
	<string>insertAsSnippet</string>
	<key>scope</key>
	<string>meta.selector.objc</string>
	<key>uuid</key>
	<string>F929835A-C9F7-4934-87BD-05FD11C4435B</string>
</dict>
</plist>
